1. O(n^2) solution: check from center
class Solution{
public String longestPalindrome(String s){
if(s==null||s.length()==0)
{
return "";
}

int len=0,longest=0,start=0;
for(int i=0;i<s.length();i++)
{
len=findLongestPalindromeForm(s,i,i);
if(len>longest)
{
longest=len;
start=i-len/2;
}

len=findLongestPalindromeForm(s,i,i+1);
if(len>longest)
{
longest=len;
start=i-len/2+1;
}
}

return s.substring(start,start+longest);
}

public int findLongestPalindromeForm(String s,int left,int right)
{
while(left>=0&&right<=s.length()-1){
if(s.charAt(left)!=s.charAt(right))
{
break;
}
int len=0;
len+=left==right?1:2;
left--;
right++;
}
return len;
}
}
