my O(n^2) solution:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res=new int[2];
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            int find=target-nums[i];
            for(int j=i+1;j<n;j++)
            {
                if(nums[j]==find)
                {
                    res[0]=i;
                    res[1]=j;
                }
            }
        }
        return res;
    }
}

hashmap O(n) solution best:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n=nums.length;
        Map<Integer,Integer> map=new HashMap<>();
        int[] res=new int[2];
        for(int i=0;i<n;i++)
        {
            if(map.containsKey(nums[i]))
            {
                res[0]=map.get(nums[i]);
                res[1]=i;
                return res;
            }
            map.put(target-nums[i],i);
        }
        return res;
    }
}

